#!/usr/bin/env node

import { program } from "commander";
import { wleUUIDifyProjects } from "./wle_uuidify.js";

program
    .argument("<project-paths...>", "file paths to the Wonderland Engine project files that need to be uuidified\reach path is a glob pattern\ryou can use \"*.wlp\" to uuidify every wlps in your folder")
    .option("-o, --output <path>", "where the uuidified project file will be stored\r (default: \"<project-dir>/uuidified-<project-name>\")")
    .option("-r, --replace", "replace the original project, ignoring the --output option, if specified")
    .option("-u, --unsafe", "uuidify the project even if there is no editor bundle, it contains errors, or for component properties that might not be incremental number IDs")
    .option("-d, --duplicates", "checks if there are duplicated IDs in the project")
    .option("-b, --editor-bundle <path>", "path to the project bundle, usually generated by building the project with the Wonderland Engine editor\r (default: \"<project-dir>/cache/js/_editor_bundle.cjs\")")
    .option("-e, --editor-bundle-extras <path>", "add extra definitions to the editor bundle via a JS script\r (default: \"<project-dir>/editor-bundle-extras.js\")")
    .option("-w, --write-on-fail", "write the result of the uuidify even if it failed\rthis option can be useful when trying to understand the errors that happened during the uuidify")
    .action(wleUUIDifyProjects);

program.parseAsync();